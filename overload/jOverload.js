// Generated by CoffeeScript 1.9.1
(function() {
  var arrEquals, funcForArgs,
    slice = [].slice;

  arrEquals = function(arr1, arr2) {
    var i, l, len1, x;
    if (arr1.length !== arr2.length) {
      return false;
    }
    for (i = l = 0, len1 = arr1.length; l < len1; i = ++l) {
      x = arr1[i];
      if (x !== arr2[i]) {
        return false;
      }
    }
    return true;
  };

  funcForArgs = function(args, argLists, funcs) {
    var arg, argList, argListToCheck, i, l, lastMatchedIdx, len1;
    argListToCheck = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = args.length; l < len1; l++) {
        arg = args[l];
        results.push(arg.constructor);
      }
      return results;
    })();
    for (i = l = 0, len1 = argLists.length; l < len1; i = ++l) {
      argList = argLists[i];
      if (arrEquals(argList, argListToCheck)) {
        return funcs[i] || funcs[lastMatchedIdx];
      }
      lastMatchedIdx = i;
    }
    return null;
  };

  window.jOverload = function() {
    var arg, argList, argLists, args, funcs, i, j, k, l, len, name, ref, type;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    argLists = [];
    funcs = [];
    i = 0;
    len = args.length;
    while (i < len) {
      j = i;
      while (!((argList = args[j]) instanceof Function) && j < len) {
        if (!(argList instanceof Array)) {
          argLists.push((function() {
            var results;
            results = [];
            for (name in argList) {
              type = argList[name];
              results.push(type);
            }
            return results;
          })());
        } else {
          argLists.push(argList);
        }
        j++;
      }
      if (j < len) {
        funcs.push(args[j]);
        for (k = l = 0, ref = j - i - 1; 0 <= ref ? l < ref : l > ref; k = 0 <= ref ? ++l : --l) {
          funcs.push(null);
        }
        i = j + 1;
      } else {
        throw new Error("No function given for argument lists: " + (JSON.stringify((function() {
          var len1, m, ref1, results;
          ref1 = args.slice(i);
          results = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            argList = ref1[m];
            results.push((function() {
              var len2, n, results1;
              results1 = [];
              for (n = 0, len2 = argList.length; n < len2; n++) {
                arg = argList[n];
                results1.push(arg.name);
              }
              return results1;
            })());
          }
          return results;
        })())));
      }
    }
    return function() {
      var f;
      if ((f = funcForArgs(arguments, argLists, funcs)) != null) {
        return f.apply(this, arguments);
      }
      throw new Error("Arguments do not match any known argument list!");
    };
  };

}).call(this);
